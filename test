
import random

def test_converter_dataclass() -> None:
    @dataclass(repr=False, frozen=True, kw_only=True, slots=True)
    class Inner:
        x: int
        y: int

        @override
        def __str__(self) -> str:
            return f"inner[{self.x},{self.y}]"

        @classmethod
        def parse(cls, text: str, /) -> Self:
            x, y = extract_group(r"^inner\[(.+?),(.+?)\]$", text)
            return cls(x=int(x), y=int(y))

    value = Inner(x=x, y=y)

    @dataclass(frozen=True, kw_only=True, slots=True)
    class Settings:
        inner: Inner

    file = root.joinpath("settings.toml")
    text = random.choice(sampled_from([f"{{x = {x}, y = {y}}}", repr(str(value))]))
    _ = file.write_text(
        strip_and_dedent(f"""
            [{app_name}]
            inner = {text}
        """)
    )
    settings = load_settings(
        Settings,
        app_name,
        start_dir=root,
        converters=[(Inner, Inner.parse)],  # TODO
    )
    assert settings.inner == value
