# build-system
[build-system]
  build-backend = "uv_build"
  requires = ["uv_build"]

# dependency groups
[dependency-groups]
  aeventkit = ["aeventkit >=2.1.0, <2.2"]
  altair = ["altair >=5.5.0, <5.6"]
  altair-test = ["polars", "img2pdf", "vl-convert-python"]
  atools = ["atools >=0.14.2, <0.15"]
  cachetools = ["cachetools >=6.2.1, <6.3"]
  click = ["click >=8.3.0, <8.4"]
  core = [
    "atomicwrites >=1.4.1, <1.5",
    "typing-extensions >=4.15.0, <4.16",
    "tzlocal >=5.3.1, <5.4",
    "whenever >=0.9.3, <0.10",
  ]
  cryptography = ["cryptography >=46.0.3, <46.1"]
  cvxpy = ["cvxpy >=1.7.3, <1.8"]
  dataclasses-test = ["orjson", "polars"]
  dev = [
    "coloredlogs >=15.0.1, <15.1",
    "coverage-conditional-plugin >=0.9.0, <0.10",
    "dycw-pytest-only >=2.1.1, <2.2",
    "pyright[nodejs] >=1.1.407, <1.2",
    "pytest-cov >=7.0.0, <7.1",
    "pytest-timeout >=2.4.0, <2.5",
  ]
  fastapi = ["fastapi >=0.120.0, <0.121"]
  fastapi-test = ["httpx", "uvicorn"]
  fpdf2 = ["fpdf2 >=2.8.4, <2.9"]
  gitpython = ["gitpython >=3.1.45, <3.2"]
  hashlib-test = ["orjson"]
  http-test = ["orjson"]
  hypothesis = ["hypothesis >=6.142.0, <6.143"]
  hypothesis-test = ["libcst", "numpy", "pathvalidate", "pytest-rerunfailures"]
  inflect = ["inflect >=7.5.0, <7.6"]
  jinja2 = ["jinja2 >=3.1.6, <3.2"]
  jupyter-test = ["pandas", "polars"]
  libcst = ["libcst >=1.8.5, <1.9"]
  lightweight-charts = ["lightweight-charts >=2.1, <2.2"]
  lightweight-charts-test = ["polars", "pyarrow"]
  math-test = ["numpy"]
  memory-profiler = ["memory-profiler >=0.61.0, <0.62"]
  more-itertools = ["more-itertools >=10.8.0, <10.9"]
  numpy = ["numpy >=2.3.4, <2.4"]
  operator = ["polars"]
  optuna = ["optuna >=4.5.0, <4.6"]
  orjson = ["orjson >=3.11.4, <3.12"]
  orjson-test = ["polars"]
  polars = ["polars >=1.34.0, <1.35"]
  polars-ols = ["polars-ols >=0.3.5, <0.4"]
  polars-ols-test = ["scikit-learn"]
  polars-test = ["numpy", "scipy", "statsmodels"]
  pottery = ["pottery >=3.0.1, <3.1"]
  pottery-test = ["orjson"]
  pqdm = ["pqdm >=0.2.0, <0.3"]
  psutil = ["psutil >=7.1.2, <7.2"]
  pydantic = ["pydantic >=2.12.3, <2.13"]
  pydantic-settings = ["pydantic-settings >=2.11.0, <2.12"]
  pydantic-settings-sops = ["pydantic-settings-sops"]
  pydantic-settings-test = ["pyyaml", "tomlkit"]
  pyinstrument = ["pyinstrument >=5.1.1, <5.2"]
  pytest = [
    "pytest >=8.4.2, <8.5",
    "pytest-asyncio >=1.2.0, <1.3",
    "pytest-randomly >=4.0.1, <4.1",
    "pytest-timeout >=2.4.0, <2.5",
    "pytest-xdist >=3.8.0, <3.9",
  ]
  pytest-regressions = ["pytest-regressions >=2.8.3, <2.9"]
  pytest-regressions-test = ["orjson", "polars"]
  pytest-test = ["orjson", "pytest-rerunfailures", "pytest-rng"]
  redis = ["redis >=7.0.0, <7.1", "orjson"]
  redis-test = ["pytest-rerunfailures"]
  reprlib-test = ["rich"]
  scipy = ["scipy >=1.16.2, <1.17"]
  sklearn = ["scikit-learn >=1.7.2, <1.8"]
  slack-sdk = ["slack-sdk >=3.37.0, <3.38"]
  slack-sdk-test = ["aiohttp"]
  sqlalchemy = ["sqlalchemy >=2.0.44, <2.1", "psycopg"]
  sqlalchemy-polars = ["sqlalchemy", "polars"]
  sqlalchemy-polars-test = ["aiosqlite", "asyncpg", "greenlet"]
  sqlalchemy-test = ["aiosqlite", "asyncpg", "greenlet"]
  statsmodels = ["statsmodels >=0.14.5, <0.15"]
  testbook = ["testbook >=0.4.2, <0.5"]
  tzdata = ["tzdata >=2025.2, <2025.3"]
  whenever-test = ["pathvalidate"]

# project
[project]
  authors = [{ email = "d.wan@icloud.com", name = "Derek Wan" }]
  dependencies = [
    "atomicwrites >=1.4.1, <1.5",
    "typing-extensions >=4.15.0, <4.16",
    "tzlocal >=5.3.1, <5.4",
    "whenever >=0.9.3, <0.10",
  ]
  name = "dycw-utilities"
  readme = "README.md"
  requires-python = ">= 3.13"
  version = "0.169.3"

  [project.entry-points.pytest11]
    pytest-randomly = "utilities.pytest_plugins.pytest_randomly"
    pytest-regressions = "utilities.pytest_plugins.pytest_regressions"

  [project.optional-dependencies]
    logging = ["coloredlogs >=15.0.1, <15.1"]
    test = [
      "dycw-pytest-only >=2.1.1, <2.2",
      "hypothesis >=6.142.0, <6.143",
      "pytest >=8.4.2, <8.5",
      "pytest-asyncio >=1.2.0, <1.3",
      "pytest-cov >=7.0.0, <7.1",
      "pytest-instafail >=0.5.0, <0.6",
      "pytest-lazy-fixtures >=1.4.0, <1.5",
      "pytest-randomly >=4.0.1, <4.1",
      "pytest-regressions >=2.8.3, <2.9",
      "pytest-repeat >=0.9.4, <0.10",
      "pytest-rerunfailures >=16.0.1, <16.1",
      "pytest-rng >=1.0.0, <1.1",
      "pytest-timeout >=2.4.0, <2.5",
      "pytest-xdist >=3.8.0, <3.9",
      "testbook >=0.4.2, <0.5",
    ]

  [project.scripts]

# tool
[tool]

  # bump-my-version
  [tool.bumpversion]
    allow_dirty = true
    current_version = "0.169.5"

    [[tool.bumpversion.files]]
      filename = "src/utilities/__init__.py"
      replace = "__version__ = \"{new_version}\""
      search = "__version__ = \"{current_version}\""

  # coverage
  [tool.coverage]
    [tool.coverage.coverage_conditional_plugin.rules]
      skipif-ci = '"CI" in os_environ'
      skipif-ci-and-mac = '("CI" in os_environ) and (sys_platform == "darwin")'
      skipif-ci-and-not-linux = '("CI" in os_environ) and (sys_platform != "linux")'
      skipif-ci-and-not-windows = '("CI" in os_environ) and (sys_platform != "windows")'
      skipif-ci-and-windows = '("CI" in os_environ) and (sys_platform != "windows")'
      skipif-linux = 'sys_platform == "linux"'
      skipif-mac = 'sys_platform == "darwin"'
      skipif-not-linux = 'sys_platform != "linux"'
      skipif-not-macos = 'sys_platform != "darwin"'
      skipif-not-windows = 'sys_platform != "windows"'
      skipif-windows = 'sys_platform == "windows"'

    [tool.coverage.html]
      directory = ".coverage/html"

    [tool.coverage.report]
      exclude_also = [
        "@overload",
        "assert_never",
        "case never:",
        "if TYPE_CHECKING:",
      ]
      fail_under = 100.0
      skip_covered = true
      skip_empty = true

    [tool.coverage.run]
      branch = true
      data_file = ".coverage/data"
      omit = [
        "src/utilities/__init__.py",
        "src/utilities/pytest_plugins/*.py",
        "src/utilities/streamlit.py",
      ]
      parallel = true
      plugins = ["coverage_conditional_plugin"]
      source = ["src/utilities"]

  # nitpick
  [tool.nitpick]
    style = [
      "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.13.toml",
      "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
    ]

  # pyright
  [tool.pyright]
    deprecateTypingAliases = true
    enableReachabilityAnalysis = false
    ignore = ["**/_typeshed/**"]
    pythonVersion = "3.13"
    reportCallInDefaultInitializer = true
    reportImplicitOverride = true
    reportImplicitStringConcatenation = true
    reportImportCycles = true
    reportMissingSuperCall = true
    reportMissingTypeArgument = false
    reportMissingTypeStubs = false
    reportPrivateUsage = false
    reportPropertyTypeMismatch = true
    reportUninitializedInstanceVariable = true
    reportUnknownArgumentType = false
    reportUnknownMemberType = false
    reportUnknownParameterType = false
    reportUnknownVariableType = false
    reportUnnecessaryComparison = false
    reportUnnecessaryTypeIgnoreComment = true
    reportUnusedCallResult = true
    reportUnusedImport = false
    reportUnusedVariable = false
    typeCheckingMode = "strict"

  # pytest
  [tool.pytest]
    [tool.pytest.ini_options]
      addopts = [
        "-ra",
        "-vv",
        "--color=auto",
        "--durations=10",
        "--durations-min=10",
        "--strict-markers",
        "--timeout=600",
      ]
      asyncio_default_fixture_loop_scope = "function"
      asyncio_mode = "auto"
      collect_imported_tests = false
      filterwarnings = [
        "error",
        "ignore:Exception ignored in.* <coroutine object .* at .*>:pytest.PytestUnraisableExceptionWarning",
        "ignore:Exception in thread Thread-.*:pytest.PytestUnhandledThreadExceptionWarning",
        "ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",                                           # jupyter
        "ignore:ResourceTracker called reentrantly for resource cleanup, which is unsupported:UserWarning",
        "ignore:The garbage collector is trying to clean up non-checked-in connection <AdaptedConnection <Connection(.*)>:RuntimeWarning", # sqlalchemy
        "ignore:Using fork.* can cause Polars to deadlock in the child process:RuntimeWarning",                                            # polars/pqdm
        "ignore:coroutine 'AsyncConnection.close' was never awaited:RuntimeWarning",
        "ignore:loop is closed:ResourceWarning",                                                                                           # redis
        "ignore:unclosed <StreamWriter .*>:ResourceWarning",                                                                               # redis
        "ignore:unclosed <socket.*socket .*>:ResourceWarning",                                                                             # redis
        "ignore:unclosed Connection <redis.*asyncio.*connection.*Connection.*>:ResourceWarning",                                           # redis
        "ignore:unclosed connection <asyncpg.*connection.*Connection.*>:ResourceWarning",                                                  # asyncpg
        "ignore:unclosed database in <sqlite3.*Connection .*>:ResourceWarning",                                                            # sqlalchemy
        "ignore:unclosed event loop <_UnixSelectorEventLoop .*>:ResourceWarning",                                                          # redis
        "ignore:unclosed file <_io.*TextIOWrapper .*>:ResourceWarning",                                                                    # logging
        "ignore:unclosed transport <_SelectorSocketTransport .*>:ResourceWarning",                                                         # redis
      ]
      minversion = "8.0"
      testpaths = ["src/tests"]
      xfail_strict = true

  # ruff
  [tool.ruff]
    src = ["src"]
    target-version = "py313"
    unsafe-fixes = true

    [tool.ruff.format]
      preview = true
      skip-magic-trailing-comma = true

    [tool.ruff.lint]
      explicit-preview-rules = true
      fixable = ["ALL"]
      ignore = [
        "ANN401",   # any-type
        "A005",     # stdlib-module-shadowing
        "ASYNC109", # async-function-with-timeout
        "C901",     # complex-structure
        "CPY",      # flake8-copyright
        "D",        # pydocstyle
        "DOC",      # pydoclint
        "E501",     # line-too-long
        "PD",       # pandas-vet
        "PERF203",  # try-except-in-loop
        "PLC0415",  # import-outside-top-level
        "PLR0911",  # too-many-return-statements
        "PLR0912",  # too-many-branches
        "PLR0913",  # too-many-arguments
        "PLR0915",  # too-many-statements
        "PLR2004",  # magic-value-comparison
        "PT012",    # pytest-raises-with-multiple-statements
        "PT013",    # pytest-incorrect-pytest-import
        "S202",     # tarfile-unsafe-members
        "S310",     # suspicious-url-open-usage
        "S311",     # suspicious-non-cryptographic-random-usage
        "S602",     # subprocess-popen-with-shell-equals-true
        "S603",     # subprocess-without-shell-equals-true
        "S607",     # start-process-with-partial-path
        # preview
        "S101", # assert
        # formatter
        "W191",   # tab-indentation
        "E111",   # indentation-with-invalid-multiple
        "E114",   # indentation-with-invalid-multiple-comment
        "E117",   # over-indented
        "COM812", # missing-trailing-comma
        "COM819", # prohibited-trailing-comma
        "ISC001", # single-line-implicit-string-concatenation
        "ISC002", # multi-line-implicit-string-concatenation
      ]
      preview = true
      select = [
        "ALL",
        "RUF022", # unsorted-dunder-all
      ]

      [tool.ruff.lint.extend-per-file-ignores]
        "src/tests/**/*.py" = [
          "S101",   # assert
          "SLF001", # private-member-access
        ]
        "src/tests/test_typing_funcs/no_future.py" = [
          "I002",
        ] # missing-required-import

      [tool.ruff.lint.flake8-tidy-imports]
        ban-relative-imports = "all"

      [tool.ruff.lint.isort]
        required-imports = ["from __future__ import annotations"]
        split-on-trailing-comma = false

  # uv
  [tool.uv]
    default-groups = "all"

    [tool.uv.build-backend]
      module-name = "utilities"
      module-root = "src"
